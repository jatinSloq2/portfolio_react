{
  "id": "2",
  "title": "Beginner’s Guide to Building Your First Full-Stack App (MERN Stack",
  "tags": ["MERN Stack", "Full-Stack", "React", "Node.js", "Express", "MongoDB", "Web Development"],
  "author": "Jatin Singh",
  "date": "2025-05-04",
  "image": "/images/blogs/blog02.png",
  "summary": 
  "This blog introduces the MERN Stack (MongoDB, Express.js, React, Node.js) as a powerful and beginner-friendly way to learn full-stack web development. It emphasizes the importance of mastering both frontend and backend skills for better job opportunities, freelance work, and self-sufficient development.",
  "content": 
  "# 🧱 Beginner’s Guide to Building Your First Full-Stack App (MERN Stack)\n\n## 🚀 Why Learn Full-Stack Development?\n\nIn today’s tech industry, companies prefer developers who can handle both frontend and backend tasks. Full-stack development makes you:\n\n- **Versatile:** Work on both the client and server sides.\n- **Valuable:** Great for startups and freelancing.\n- **Self-Sufficient:** Build complete applications independently.\n- **Employable:** In-demand skill across the job market.\n\n> 💡 Learning full-stack with JavaScript alone (MERN stack) is ideal for beginners since you only need to master one language across the stack.\n\n---\n\n## 🧰 Why MERN Stack?\n\nThe MERN stack is a powerful combination of technologies for building full-featured web apps:\n\n| Technology | Role            |\n|------------|------------------|\n| MongoDB    | NoSQL database   |\n| Express.js | Web framework    |\n| React.js   | Frontend library |\n| Node.js    | Backend runtime  |\n\nBenefits:\n\n- Uses JavaScript end-to-end\n- Fast, scalable, and easy to learn\n- Rich ecosystem and job market support\n\n![MERN Stack Diagram](./images/mern-diagram.png)\n\n---\n\n## 🛠️ Project Overview\n\nWe’ll build a **Task Manager** app with:\n\n- Add, edit, delete tasks\n- Save to MongoDB\n- Frontend with React\n- Backend with Express.js & Node.js\n\nFolder structure:\n\n```bash\nmern-task-manager/\n├── backend/\n└── frontend/\n```\n\n---\n\n## ⚙️ Setting Up the Backend (Node + Express + MongoDB)\n\n### 1. Initialize the Backend\n\n```bash\nmkdir backend\ncd backend\nnpm init -y\nnpm install express mongoose cors dotenv\n```\n\nCreate `.env`:\n```env\nPORT=5000\nMONGO_URI=your_mongodb_connection_string\n```\n\n### 2. Basic Express Server\n\n```js\n// backend/index.js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nrequire('dotenv').config();\n\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\nmongoose.connect(process.env.MONGO_URI)\n  .then(() => console.log(\"MongoDB connected\"))\n  .catch((err) => console.log(err));\n\napp.get('/', (req, res) => {\n  res.send('API is running');\n});\n\napp.listen(process.env.PORT, () => {\n  console.log(`Server running on port ${process.env.PORT}`);\n});\n```\n\n### 3. Create Task Schema\n\n```js\n// backend/models/Task.js\nconst mongoose = require('mongoose');\n\nconst TaskSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  completed: { type: Boolean, default: false }\n});\n\nmodule.exports = mongoose.model('Task', TaskSchema);\n```\n\n---\n\n## 🎨 Setting Up the Frontend (React)\n\n### 1. Create React App\n\n```bash\nnpx create-react-app frontend\ncd frontend\nnpm install axios react-router-dom\n```\n\n### 2. Folder Structure\n\n```bash\nfrontend/\n├── src/\n│   ├── components/\n│   ├── pages/\n│   ├── App.js\n│   └── index.js\n```\n\n### 3. Axios Example for Fetching Tasks\n\n```js\nimport axios from 'axios';\n\nuseEffect(() => {\n  axios.get('http://localhost:5000/tasks')\n    .then((res) => setTasks(res.data))\n    .catch((err) => console.log(err));\n}, []);\n```\n\n---\n\n## 🔁 Connecting Frontend & Backend\n\n### 1. Add Proxy to `frontend/package.json`:\n\n```json\n\"proxy\": \"http://localhost:5000\"\n```\n\n### 2. Make API Calls with Axios\n\n```js\naxios.post('/tasks', { title: \"New Task\" });\n```\n\n---\n\n## 🚢 Deployment Tips\n\n### For Backend:\n- Use **Render**, **Railway**, or **Vercel**\n- Add your MongoDB URI as an environment variable\n\n### For Frontend:\n- Use **Netlify** or **Vercel**\n- Build the project:\n```bash\nnpm run build\n```\n\n---\n\n## 📸 Add Screenshots\n\nAdd these suggested screenshots:\n- ✅ Folder structure\n- ✅ Terminal setup and install commands\n- ✅ MongoDB Compass with your DB\n- ✅ React UI with task list\n\nUse markdown image syntax:\n```markdown\n![Task Manager UI](./images/task-ui.png)\n```\n\n---\n\n## 🧠 Final Thoughts\n\nYou’ve just created your first full-stack app using the MERN stack! This is the foundation. From here, you can:\n\n- Add authentication (JWT)\n- Implement user registration/login\n- Add file uploads or real-time updates\n\n> 🔥 The more projects you build, the more confident and hireable you become. \n ---\n"
}